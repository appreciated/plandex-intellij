tasks:
  - title: Create a module architecture documentation
    llmInputType: generateArtifact
    fileInputUserMessages:
      - pom.xml
      - data-model.txt
      - api-definition.txt
    userMessages:
      - Generate a module architecture as markdown
    artifact: planned-architecture.md
  - title: Create a class list documentation
    llmInputType: generateArtifact
    fileInputUserMessages:
      - pom.xml
      - data-model.txt
      - api-definition.txt
      - planned-architecture.md
      - src-examples/*.java
    userMessages:
      - Generate a very specific list of classes needed based on the provided input including file suffix a documentation of the class roles, packages based on the artifact id in the pom, the destination path in the source folder, relations to other classes, a list of the required methods, document the purpose for each method
    outputFormatUserMessages:
      - |-
        classes:
          - name: TestClass.java
            package: com.test.example
            path: src/main/java/com/test/example/TestClass.java
            relations: Is related to class TestClass2
            role: Stores some stuff
            methods:
              - name: someMethodName
                description: Creates some stuff ...
              - name: someMethodName
               description: Creates some stuff ...
          - name: TestClass2.java
          ...
    artifact: planned-classes.yaml
  - title: Class Generation
    llmInputType: generateArtifactsForEachYamlListItem
    fileInputUserMessages:
      - pom.xml
      - src-examples/*.java
    yamlList: planned-classes.yaml
    yamlListItemsKey: classes
    yamlListItemPathKey: path
    yamlListItemSkipIfAlreadyExists: true
    userMessages:
      - |
        - Here are the criteria of the next class to be generated:
          - %s
          - use the code examples under 'src-examples/'
          - implements all methods 
          - add the related documentation
    artifactPattern: src/main/java/**/*.java
  - title: Check classes for missing implementations or other issues
    llmInputType: generateYamlListByForEachArtifactCheck
    forEachFileInputPattern:
      - src/main/java/**/*.java
    userMessages:
      - |-
        - Analyze the given class:
          - Look for imports not matching the technology stack
          - Look for missing method implementations (f.e. comments like '// Implementation here ...')
      - If the class has no issues respond with `class-has-no-issues`
    listArtifact: classes-with-issues.yaml
    listArtifactNegativeMatchKeyword: class-has-no-issues
    yamlListItemsKey: classes
    yamlListItemPathKey: path